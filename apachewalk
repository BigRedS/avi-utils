#! /usr/bin/perl

# apachewalk

# 'Walks' your apache configuration beginning from the file defined 
# in $conf. It follows all includes and prints to stdout everything 
# that is neither comment nor include. It's aimed at piping to other 
# utilities - grepping for repeated configuration, for example.

# written by Avi (@avi.co) in 2009

## Todo: Seriously needs some getopts love

#Depends: perl (>= 5.10)

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.

use strict;
use 5.010;
use File::Basename;

## Default display 'mode':
my $output = "both";

## Separator between 'file' and 'line' column when printing both:
my $filenameLineSeparator = "\t";

## If non-zero, strips indentation from config file lines when printing.
my $suppressLeadingWhitespace = 1;

## How we determine that a line is an 'Include' directive. Making this
## lower-case might make it work on PHP scripts, for example. 
## I can't work out how to stick the options in a variable, so we're not
## using that yet. Answers on a postcard, please.
my $includeRegexPattern = "^Include";
###my $includeRegexOptions = "";

#{&usage(); exitif !$ARGV[0];

if (!$ARGV[0]){
	&usage;
	exit 1;
}


my $conf = $ARGV[0];

$output = $ARGV[1] || $output;
my ($printFilename, $printLine);
given ($output){
	when(/^b/i){
		($printLine, $printFilename) = (1,1);
	}
	when(/^f/i){
		$printLine = 0;
		$printFilename = 1;
	}
	when(/^l/i){
		$printLine = 1;
		$printFilename = 0;
	}
}
		

&walk_file($conf);

sub walk_file() {
	my $filename = shift;

	my $filePath = dirname($filename);

	if(($printFilename == 1) && ($printLine != 1)){
		print "$filename\n";
	}

	unless ( -f $filename){
		&error("$filename isn't a file", "1");
		exit 1;
	}
	unless ( -r $filename){
		&error("Don't have permission to read $filename", "0");
	}

	open (my $fh, "< $filename") or die ("Error opening file: $filename");

	while(<$fh>){
		given ($_){
			when ((/^#/) || (/^$/)){
				sleep 0;
			}
			## By default, read this as
			#    (/^Include/){
			when (m/$includeRegexPattern/){
				my $Includepath = (split(/\s/, $_))[1];
				if ($Includepath =~ m/^\//){
					&include($Includepath);
				}else{
					&include($filePath."/".$Includepath);					
				}
			}

			default{
				if (($printLine == 1) && ($printFilename != 1)){
					my $line = $_;
					if($suppressLeadingWhitespace != 0){$line =~ s/^\s+//};
					print $line;
				}elsif (($printLine == 1) && ($printFilename == 1)){
					my $line = $_;
					if($suppressLeadingWhitespace != 0){$line =~ s/^\s+//};
					print $filename.$filenameLineSeparator.$line;
				}
			}
		}
	}
	close($fh);
}	

sub include() {
	my $path = shift;
	chomp $path;
	if(($path =~ /\*.+/) || ($path =~ /\/$/)){
		$path =~ s/\/$/\/\*/;
		foreach(glob($path)){
			print $1;
			&walk_file($_);
		}
	}else{
		if(-f $path && -s $path){
			&walk_file($path);
		}elsif(-d $path){
			&walk_dir($path);
		}else{
			if (-s $path){
				last;
			}
		}
	}
}


sub walk_dir() {
	my $dirname = shift;
	opendir(DIR, $dirname);
	foreach(sort(readdir(DIR))){
		&walk_file($_) if ($_ !~ /^./);
	}
}

sub error {
	my $message = shift;
	my $usage = shift;
	print "\nError:\t$message\n";
	&usage() if $usage != 0;
	exit 1;
}

sub usage {

print <<END

Usage:
	apachewalk <FILE> [OUTPUT]

Reads Apache configuration file at FILE, following any
Include directives and outputs the complete configuration
according to OUTPUT. 

FILE should be Apache's core configuration file. Often
/etc/apache/httpd.conf or /etc/apache2/apache2.conf

OUTPUT dictates the output format:

file	print every filename included in the config
line	print every line of configuration
both	for each line of configuration, print the file it
	was found in and the line found. Handy for grepping
	for "where did I configure that?" type questions.

current default is $output

See the top of the script for instructions on altering this
to work with other situations where some files include others.

END

}

