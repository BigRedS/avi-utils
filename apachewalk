#! /usr/bin/perl

# apachewalk

# 'Walks' your apache configuration beginning from the file defined 
# in $conf. It follows all includes and prints to stdout everything 
# that is neither comment nor include. It's aimed at piping to other 
# utilities - grepping for repeated configuration, for example.

# written by Avi (@avi.co) in 2009

## Todo: test on things that aren't apache

#Depends: perl (>= 5.10)

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.

use strict;
use 5.010;
use File::Basename;
use Getopt::Std;

# Set some defaults:
my $printLine = 1;
my $printFilename = 1;
my $supressLeadingWhitespace = 0;
my $filenameLineSeparator = "\t";
my $includeRegexPattern = '^\s*Include\s*(\S+)\s*\n';

my %o;
getopts('lfLFwWs:p:', \%o);
$printLine = 1 if $o{l};
$printLine = 0 if $o{L};

$printFilename = 1 if $o{f};
$printFilename = 0 if $o{F};

$supressLeadingWhitespace = 1 if $o{W};
$supressLeadingWhitespace = 0 if $o{w};

$filenameLineSeparator = $o{s} if $o{s};

$includeRegexPattern = $o{p} if $o{p};

if (!$ARGV[0]){
	&usage;
	exit 1;
}


my $conf = $ARGV[0];

&walk_file($conf);

sub walk_file() {
	my $filename = shift;

	my $filePath = dirname($filename);

	if(($printFilename == 1) && ($printLine != 1)){
		print "$filename\n";
	}

	unless ( -f $filename){
		&error("$filename isn't a file", "1");
		exit 1;
	}
	unless ( -r $filename){
		&error("Don't have permission to read $filename", "0");
	}

	open (my $fh, "< $filename") or die ("Error opening file: $filename");
print "[[[[ $includeRegexPattern ]]]]";
	while(<$fh>){
		given ($_){
			when ((/^#/) || (/^$/)){
				sleep 0;
			}
			when (/$includeRegexPattern/i){
				my $Includepath = $1;
				if ($Includepath =~ m/^\//){
					&include($Includepath);
				}else{
					&include($filePath."/".$Includepath);					
				}
			}

			default{
				if (($printLine == 1) && ($printFilename != 1)){
					my $line = $_;
					if($supressLeadingWhitespace != 0){$line =~ s/^\s+//};
					print $line;
				}elsif (($printLine == 1) && ($printFilename == 1)){
					my $line = $_;
					if($supressLeadingWhitespace != 0){$line =~ s/^\s+//};
					print $filename.$filenameLineSeparator.$line;
				}
			}
		}
	}
	close($fh);
}	

sub include() {
	my $path = shift;
	chomp $path;
	if(($path =~ /\*.+/) || ($path =~ /\/$/)){
		$path =~ s/\/$/\/\*/;
		foreach(glob($path)){
			print $1;
			&walk_file($_);
		}
	}else{
		if(-f $path && -s $path){
			&walk_file($path);
		}elsif(-d $path){
			&walk_dir($path);
		}else{
			if (-s $path){
				last;
			}
		}
	}
}


sub walk_dir() {
	my $dirname = shift;
	opendir(DIR, $dirname);
	foreach(sort(readdir(DIR))){
		&walk_file($_) if ($_ !~ /^./);
	}
}

sub error {
	my $message = shift;
	my $usage = shift;
	print "\nError:\t$message\n";
	&usage() if $usage != 0;
	exit 1;
}

sub usage {

print <<END

Usage:
	apachewalk [OPTIONS] <FILE> 

Reads Apache configuration file at FILE, following any
Include directives and outputs the complete configuration.

FILE should be Apache's core configuration file. Often
/etc/apache/httpd.conf or /etc/apache2/apache2.conf

Options are:

  -f    Prefix each line of config with the file it was 
        found in (default)
  -F    Don't prefix each line of config with the file it
        was found in

  -l	Print each line of config (default)
  -L	Don't print any lines of config

  -w    Preserve whitespace at the beginning of config 
        lines (default)
  -W    Don't preserve leading whitespace

  -s SEPARATOR
        Specify a separator to go between the filename and 
	the config snippet on each line. Defaults to a tab 
	character

  -p PATTERN
        Specify a Perl regex with which to identify lines 
	that are simply include directives. When it matches, 
	the `\$1` backreference is then assumed to be a
	path to a file or directory. It is matched case 
	insensitively (i.e. with /i).
	Default is: 
	  $includeRegexPattern
	which is aimed at Apache config files. When 
	changing this, be wary of the shell doing bad 
	things to escaped characters. It might be safest
	to just set $includeRegexPattern which you can 
	find declared at about line 31

END

}

