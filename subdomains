#! /bin/bash
# Yeah, bash. I was bullied into it.

# Subdomains

# Expects to be passed a domain, and performs a DNS lookup for <subdomain>.<domain> 
# for each of the list below.
# The plan is to use it to guess what some incoming customer's DNS config might 
# be if their current registrar is being a bit of a tit.

# Written by Avi (@avi.co) in 2010

## Todo: Should check MX records and, if those also point to a subdomain, look that up, too

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.


# Stick subdomains you want to check for here, between the BEGIN and END markers
# bear in mind this is all bash script, so they need to be commented out.
#BEGIN
#mx
#mx0
#mx1
#mx2
#mx5
#mx10
#mx20
#ns0
#ns1
#ns2
#ns
#mail1
#mail2
#mail10
#mail20
#mail30
#www
#ftp
#gopher
#news
#cvs
#git
#svn
#cpanel
#webmail
#irc
#smtp
#pop
#imap
#chat
#forum
#forums
#wiki
#pop3
#exchange
#dns0
#dns1
#ThisIsATestForWildcardDNSRecords
#dev
#support
#login
#exchange
#exch2web
#owa
#m
#mobile
#wap
#END

if [ -z $1 ]; then
	echo "Usage: subdomain [DOMAIN-NAME]"
	echo "Checks for the existence of DNS records for common subdomains"
	echo "Edit the script to update the dictionary to check against"
	exit 1
fi

DICTIONARY=$(cat $0 | sed -n '/BEGIN$/,/END$/p' | grep -v "END" | grep -v "BEGIN" | sed -n 's/#//p')
DOMAIN=$1

dig $DOMAIN | grep -v "^;" | grep -v "SOA" | grep -v "NS" |  grep $DOMAIN

wildcard=sdfsdfasdkjfewjkarenawjsnhdfnhasdjfn.$DOMAIN
wildrecord=$( dig $wildcard | grep -v "^;" | grep -v "SOA" | grep $wildcard )

if [ -z "$wildrecord" ]; then

	for i in $DICTIONARY; do
		subdomain=$i.$DOMAIN
		record=$( dig $subdomain | grep -v "^;" | grep -v "SOA" | grep $subdomain ) 
	
		if [ -z "$record" ]; then
			sleep 0
		else
			echo $record
		fi
	done
else
	echo "It looks like there's a wildcard record here. Avi hasn't worked out how"
	echo "to make that happen gracefully in Bash yet."
fi
