#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Std;
my %opts;
getopts('w:r:p:c:i:l:', \%opts);

my $width    = $opts{w} || 80;
my $range    = $opts{r} || 100;
my $prefix   = $opts{p} || 'number';
my $label    = $opts{l};
my $command  = $opts{c};
my $interval = $opts{i} || 1;

my $dontShowNumber = undef;

my $numberWidth = length($range);
$numberWidth += 2;

$width = $width - $numberWidth;

my %prefix;
$prefix{'number'} = sub{
		my $number = shift;
		chomp $number;
		my $width = length($range);
		return $number, $width;
	};
$prefix{'time'} = sub{
		my @time = (localtime)[2,1,0];
		my $date = sprintf("%d:%02d:%02d", @time);
		$date .= " | ".(&{$prefix{'number'}})[0] unless $dontShowNumber;
		my $width = length($date);
		return $date, $width;
	};
$prefix{'date'} = sub{
		my @t = (localtime)[5,4,3,2,1,0];
		$t[0]+=1900;
		$t[1]++;
		my $date = sprintf("%d-%02d-%02d %d:%02d:%02d", @t);
		$date .= " ".(&{$prefix{'number'}})[0] unless $dontShowNumber;
		my $width = length($date);
		return $date, $width;
	};

$SIG{'INT'} = 'statsAndExit';
my ($total, $max, $min) = (0,0,0);
my $count = 0;
while(1){
	my $number = `$opts{c}`;
	if ($number =~ /^\D*(\d+\.?\d*)/){
		$number = $1;
	}

	$total += $number;
	$max = $number if $number>$max;
	$min = $number if $number<$min;

	my $spaceForBar = $width;

	my ($prefix, $prefixLength) = &{$prefix{$prefix}}($number);;
	if ($label){
		my @output = qx/$opts{'l'}/;
		$label = $output[0];
		chomp $label;
		$prefix = $label." ".$prefix;
		$prefixLength = length($prefix);
	}
	printf( "%-${prefixLength}s", $prefix);
	$spaceForBar -= $prefixLength;

	print " | ";

	my $barWidth = ($number/$range) * $spaceForBar;

	$barWidth =~ /^(\d+)\.?\d*/;
	$barWidth = $1;

	$barWidth = $spaceForBar + 1 if $barWidth > $spaceForBar;
	my $bar = '#' x $barWidth;

	if( ( (length($bar)) == 0) && ($number > 0) ){
		$bar = '+';
	}

	printf "%-${spaceForBar}s", $bar;
	print "|" unless $barWidth > $spaceForBar;;
	print "\n";	
	sleep $opts{i} if exists($opts{i});
	$count++;
}

sub statsAndExit{
	my $avg = $total/$count;
	print "\rTotal:$total  Count:$count  Max:$max  min:$min  Avg:";
	printf("%.2f", $avg);
	print "\n";
	exit;
}

sub usage{
return <<EOF;

bartab

Repeatedly runs a command (like watch), printing a bar graph
representing the values of that number over time. 

A single '+' for a bar represents a value much lower than that
of a single '#' but greater than zero. 

USAGE:
  bartab [options]

 OPTIONS:
  -c [cmd]   Command to run. The first number in the output is 
             graphed.

  -i [int]   Interval in seconds between executing the command. 
             Default is 1s.

  -l [label] The label co
  -r [range] Range of the graph. This is the maximum number that will
             fit in the graph. Vallues that exceed this will be 
	     'overlap' the final character at the right hand edge.

  -p [prefix] Text to prefix each line of the chart with. Default is
             'number' which simply prints the value of the number being
	     displayed. Other options are:
	       date:  prints a date and time YYYY-MM-DD HH:MM:SS
	       time:  prints the time: HH:MM:SS
	     these also print the value, too.
   
  -w [with]  Set the width of the graph in characters. Defaults to
             80

 EXAMPLES:

Graph loadaverage on a low-loaded machine (where we don't expect the 
loadaverage to go over 0.5):

  bartab -r 0.5 -c "cat /proc/loadavg"




EOF





}
