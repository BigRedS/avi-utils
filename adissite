#! /usr/bin/perl

# adissite

# Meant as an equivalent of a2dissite for Apache  vhosts - comments
# out a vhost definition in a file containing many vhosts. 
#
# Prompts before doing any writing, and leaves a backup file behind, 
# too
#
# Expects to be given a documentroot or a line number as its first 
# argument, and an apache config file as its second; does not follow 
# include directives
#
# If it's passed a document root, the *first* vhost found to use that
# is assumed to be the one you're after. If it's passed a number, that
# line is checked for a <VirtualHost> open tag and, if it's found, that
# virtualhost is commented out. If there's no open tag on that line, 
# the script die()s.

# Written by Avi (@avi.co) in 2009

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.

use strict;

if(!$ARGV[1]){&usage();}

my $match;
if ($ARGV[0] =~ /^\d+$/){
	$match = "line";
}else{
	$match = "docroot";
}
my $arg = $ARGV[0];

my $configFile = $ARGV[1];

my $tempFile = $configFile."~";
my $backupFile = $configFile."old";

# Store a copy of the contents of the config file
##Todo: lock this file
open (my $conf, "<", $configFile);
my @lines = <$conf>;
close($conf);


&commentOutVhost($arg, $match);


sub commentOutVhost() {
	my $arg=shift;	

		my $midst;
		my($beginning, $end);
		if ($match =~ /docroot/){
			unless ($midst = &getMidst($arg)){
				print "Vhost not found.\n";
				exit 1;
			}
			$beginning = &getBeginning($midst);
			$end = &getEnd($midst);
		}elsif($match =~ /line/){
			$beginning = $arg -1; # since we're faffing with arrays not files
			unless ($lines[$beginning] =~ /\s*<\s*VirtualHost/i){
				die "No vhost open tag found at line $arg";
			}
			$end = &getEnd($beginning);
		}	
	
		if ($beginning < $end){
		print "Found virtualhost:\n";
		for (my $i=$beginning; $i<=$end; $i++){
			print "\t$lines[$i]";
		}

		print "Comment out this vhost? [y|N]\n";
		my $answer = <STDIN>;
		if ($answer =~ /^y$/i){
			&commentOut($beginning, $end);
		}
	}else{
		print "Found a virtualhost, but it ends before it begins:\n";
		print "\tbegins: $beginning\n";
		print "\tends:   $end\n";
		print "I think this is a job for a human :)\n";
		exit 1;
	}
}

sub commentOut() {
	my $beginning = shift;
	my $end = shift;

	rename($configFile, $backupFile) or die "Error backing up $configFile to $backupFile";

	open(my $f, ">", $configFile) or die "Error opening $configFile for writing";

	for(my $i=0; $i <= @lines; $i++){

		if( ($i <= $end) && ($i >= $beginning) ){
			print $f "#".$lines[$i];
		}else{
			print $f $lines[$i];
		}
	}
	close($f);
}

sub getMidst() {
	my $documentRoot = shift;
	my $count = 0;
	my $regex;
	
	foreach my $line (@lines){
		if (($line =~ /DocumentRoot\s+\"?$documentRoot\"?/i) && ($line !~ /^\s?\#/)){
			return $count;
		}
		$count++;
	}
	return undef;
}

sub getBeginning(){
	my $midst = shift;
	my $return;
	for (my $i=$midst; $i > 1; $i--){
		if (@lines[$i] =~ /.*<\s*VirtualHost\s+.+>/i){
			return $i;
		}
	}
}

sub getEnd(){
	my $midst = shift;
	my $return;
	for (my $i=$midst; $i<=@lines; $i++){
		if(@lines[$i] =~ /.*<\/VirtualHost\s*>/i){
			return $i;
		}
	}
}

sub usage(){
print <<EOF
Usage:
	$0 [DocumentRoot] [file]

Identifies VirtualHosts in the file specified by their
DocumentRoot definition. Finds the first non-commented-
out vhost with the supplied DocumentRoot and displays 
its <VirtualHost> stanza, then asks if you'd like to 
disable it. Do not include the phrase 'DocumentRoot', 
just the path.

Currently ignores commented out vhosts, so should only 
find 'active' vhosts (which is normally the kind you're 
after)

Example:

adissite /home/avi/public_html /etc/apache/httpd.conf

EOF
}
