#! /usr/bin/perl

# allowhost

# Used to un-deny hosts denied access by denyhosts. Given an IP address
# as its only argument, looks for and removes it from Denyhosts' files
# and restarts Denyhosts. If it doesn't find it, will grep iptables 
# output and report on findings, but not actually manipulate iptables 
# directly.

# written by Avi (@avi.co) in 2010

#Depends: grep (grep), which (debianutils)

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.

# # # #

# Files to check. These are reasonable defaults for debian. Anything ending with an asterisk is
# treated as a directory, and each of its contents is processed.

my @files=("/etc/hosts.deny","/var/lib/denyhosts/*");
#my @files=("/home/avi/bin/test/etc/hosts.deny","/home/avi/bin/test/var/lib/denyhosts/*");

## How to find an IP address in the firewall. Has " $ip" appended to it, and is executed in backticks
$iptables = "iptables -nL | grep ";

## How to stop and start denyhosts. 
my $stopDenyHosts = "/etc/init.d/denyhosts stop";
my $startDenyHosts = "/etc/init.d/denyhosts start";



# End of config. Stop typing! #



# The array @ARGV contains all arguments to the script. $ARGV[0] is the first:
$ip = $ARGV[0];

# check the validity of the IP address:
if ($ip !~ m/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/){&usage;exit 0;}
foreach(split/\./, $ip){
	if ($_ > 255){&usage; exit 0;}
}


my @found;	# Keep track of which files contained the IP address

		
foreach my $file (@files){	# for each file in array @files, as scalar $file
	if($file =~ m/\*$/){	 # If $file ends wth an asterisk
		chop $file;	  # remove trailing * (chop removes last character)
		chop $file;	  # remove trailing /
		&processDirectory($file, $ip);
	}else{
		if ( -d $file){ die "$file is a directory, not a file. It must end with an asterisk in this case"; }
		&removeIP($file, $ip);
	}
}


$matches = @found;	# $matches now contains the number of elements in @found

if ($matches > 0){
	print "Found $ip in $matches files, and removed it from all of them\n";
	foreach(@found){
		print "\t$_\n";	 # $_ is shorthand for 'the variable we're currently interested
				 # in'. I gather it makes no sense to non-perl people but it's 
				 # really really really handy for the rest of us :)
				 # there's a whole family of them, and they're all awesome.
	}
	`$stopDenyHosts`;
	`$startDenyHosts`;
}else{
	print "Didn't find $ip in any of denyhosts' files\n";
	if(`which iptables`){	## This test should probably be better. 
		print "Would you like to check for its existence in\n";
		print "iptables?\n";
		print "Enter 'y' for yes, anything else for no\n";
		my $ans = <STDIN>;
		chomp $stdin;			#chomp removes trailing linebreaks if they're there
		if ($ans =~ m/^y$/){
			print "running $iptables $ip ...\n";
			`$iptables $ip`
		}
	}
}

exit 0;


# This sub enters a directory and calls &removeIP() on each file therein
# that's not a dotfile. 

sub processDirectory() {
	my $directory = shift;	# $directory is first argument to function
	my $ip = shift;		# $ip is second
				# this is equivalent to my($directory,$ip)=@_[0,1];
				# but way more readable :)

	# Get contents of $directory into array @files. This is not the same
	# @files as at the top of the file, 'cause the my means only in this 
	# scope. It's still a stupid name for one variable or the other.
	opendir(my $dh, $directory) or die "Error opening $directory";
	my @files = readdir($dh);	
	closedir $dh;

	# For each one of those files that doesn't begin with a dot, pass it
	# as the first argument to removeIP()
	foreach (@files){
		unless(/^\./){
			$file = $directory."/".$_;	
			&removeIP($file, $ip);
		}
	}
}


# This sub parses a file, removing all mentions of the IP address in its 
# second argument.
sub removeIP() {
	my $file = shift;
	my $ip = shift;

	my $tempFile = $file."+";
	
	# open(filehandle, read state, file path), where readstate is ro (<) or rw (>)
	open(my $f, "<", $file) or die "Error opening $file for reading";
	open(my $t, ">", $tempFile) or die "Error opening temp file $tempFile for writing";

	my $found = 0;
	while(<$f>){
		unless(/$ip/){
			# if the line doesn't contain the IP address we're after, print it
			# to filehandle $t (which is $tempfile). If that fails, complain
			print $t $_ or die "Error writing to temp file $tempFile";
		}else{
			# If it does contain the IP address, make a note of that but don't
			# print the line anywhere.
			$found = 1;
		}
	}
	# If we did find the IP address in the file, stick it in the @found array, 'cause
	# statistics are cool.
	if ($found != 0){ push(@found, $file); }
	
	close($f);
	close($t);
	rename($tempFile, $file) or die "Error moving temp file $tempFile to permanent file $file";

}


sub usage(){
	print <<EOF
Usage:
	allowhost <IP address>

Removes IP address from DenyHosts' files, and restarts
DenyHosts. Prompts to check with iptables if the IP
address is not blocked by DenyHosts.

Checks for a valid IP address before starting, which 
might be why you're seeing this.

EOF
}
