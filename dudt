#! /usr/bin/perl

# dudt

# Measures the change in disk usage of a directory with
# respect to time (du/dt).
# Expects the directory to check as an argument, and accepts
# a second argument which is the number of seconds to wait 
# between successive 'du'ing. 
# Outputs before & after sizes, absolute change and MBps 
# change. 

# Written by Avi (@avi.co) in 2010

##Todo: split size from filename only on one space (make work with filenames with spaces)

#Depends: du (coreutils)

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.

&usage() if (!$ARGV[0]);

my $dir = $ARGV[0];
my $sleep = $ARGV[1] || 20;
my %output;

my $cmd = "du -xs ${dir}/*";

$| = 1;

my $line = "Running `$cmd`...";
my $lineLength = length($line);
print $line
my @out = `$cmd`;

foreach(@out){
        my ($size,$dir) = (split(/\s/, $_))[0,1];
        $output{$dir}[0] = $size;
}
for (my $l = 0; $l <= $lineLength; $l++){
	print "\b";
}
for (my $i = 0; $i <= $sleep; $i++){
	$line = "Sleeping for $sleep seconds ($i/$sleep)...\r";
	print $line;
	sleep 1;
}
for (my $l = 0; $l <= (length($line)); $l++){
	print "\b";
}

print "Running `$cmd` again...\r";
my @out = `$cmd`;
foreach(@out){
        my ($size,$dir) = split(/\s/, $_);
        $output{$dir}[1] = $size;
}


foreach(keys(%output)){
        # since du counts in 512B blocks:
        $before = scalar ($output{$_}[0] * 512);
        $after = scalar ($output{$_}[1] * 512);
        $change = $after - $before;
        $rate = $change/$sleep;

	$output{$_}[0] = $before;
	$output{$_}[1] = $after;
	$output{$_}[2] = $change;
	$output{$_}[3] = $rate;
}

my $len1 = 4;
my $len2 = 6;
my $len3 = 5;
my $len4 = 9;
my $len5 = 12;

foreach(keys(%output)){
	if (length($_) > $len1){
                $len1 = length($_);
        }
        if (length($output{$_}[0]) > $len2){
                $len2 = length($output{$_}[0]);
        }
        if (length($output{$_}[1]) > $len3){
                $len3 = length($output{$_}[1]);
        }
	if (length($output{$_}[2]) > $len4){
		$len4 = length($output{$_}[2]);
	}
	if (length($output{$_}[3]) > $len5){
		$len5 = length($output{$_}[3]);
	}
}
$len1+=4;

printf("%-${len1}s | %-${len2}s | %-${len3}s | %-${len4}s | %-${len5}s", "File", "Before", "After", "Change", "Rate (MBps)  |");
print "\n";

foreach(keys(%output)){
	my $before = $output{$_}[0];
	my $after = $output{$_}[1];
	my $change = $output{$_}[2];
	my $rate = $output{$_}[3];
        printf("%-*s | ", $len1 , "$_ ");
	printf("%-*s | ", $len2 , "$before");
	printf("%-*s | ", $len3 , "$after");
	printf("%+-*s | ", $len4 , "$change");
	printf("%+-*s | ", $len5 , "$rate");
	print "\n";


}

sub usage() {
	print <<EOF;
$0: show rate of change of directory usage with respect to time.

USAGE:
	$0 DIRECTORY [PERIOD]

dudt runs 'du' against DIRECTORY, sleeps for PERIOD seconds and then 
does it again. It then prints out the absolute values, size of change
and avareage rate of change.

PERIOD defaults to 20 seconds.

EOF
exit 1;
}
