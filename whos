#! /usr/bin/perl

# whos

# Performs a whois lookup, returns only what you're probably interested 
# in.
# Can do bulk whois lookups, which is a really easy way to get yourself
# blocked by a whois server :)
# Expects a list of one or more domain names as arguments, if there's only
# one you get nice human-readable output, if there's more than one you
# get double-colon-delimited output for grepping or awking or whatever.

# written by Avi (@avi.co) in 2010

#Depends: whois (whois)

# This is free software. It is distributed under the 
# terms of the 2-clause BSD license. See ./license.txt.


use strict;

&usage() if !$ARGV[0];

if (!$ARGV[1]){
	my ($registrant,$registrar,$registeredOn,$renewal,$ns) = &GetDomainInfo($ARGV[0]);
	print "Registrant:\t$registrant \nRegistrar:\t$registrar \nRegistered:\t$registeredOn \nExpires:\t$renewal \nNameservers:\n";
	foreach(@$ns){
		print "\t$_\n";
	}
}else{
	print "Domain :: Registrant :: Registrar :: Registered date :: Expiry date :: name servers\n";
	my %domains;
	sleep 30;
	foreach my $domain (@ARGV){
		my @info = &GetDomainInfo($domain);
		my ($registrant,$registrar,$registeredOn,$renewal,$ns) = @info;
		my $nameservers = join(' ', @$ns);
		print $domain."::".$registrant."::".$registrar."::".$registeredOn."::".$renewal."::".$nameservers;
		print "\n";
	}
}

sub GetDomainInfo(){
	my $domain = shift;
	my ($registrant, $registrar, $registeredOn, $renewal, @nameservers);

	if ($domain =~ /uk$/){
		my $whois = `whois $domain`;
		if ($whois =~ /Registrant:\W+([\w\s]+)\n[.\s\n]+/){
			$registrant = $1;
			chomp $registrant;
		}
		if ($whois =~ /Registrar:[\W\s]+([\w\s]+)/){
			$registrar = $1;
			chomp $registrar;
		}
		if ($whois =~ /Registered on:\s+(\d\d\-\w\w\w\-\d\d\d\d)/){
			$registeredOn = $1;
			chomp $registeredOn;
		}
		if ($whois =~ /Renewal date:\s+(\d\d\-\w\w\w-\d\d\d\d)/){
			$renewal = $1;
			chomp $renewal;
		}
		if ($whois =~ /Name servers:\n(.+)WHOIS lookup made/s){
			my $ns = $1;
			foreach my $nameserver ( split (/\n/, $ns)){
				if ($nameserver =~ (/\s*([\S]+)\s*/)){
					$nameserver = $1;
					if ($nameserver !~ /^$/){
						push @nameservers, $nameserver;
					}
				}
			}
		}
	}elsif($domain =~ /(com|org|edu|net|tv)$/){
		my $whois = `whois $domain`;
		if ($whois =~ /Registrars\.Registrant:\n\s+(.+)\n/){
			$registrant = $1;
			chomp $registrant;
		}
		if ($whois =~ /Registration Service Provider:\n\s+(.+)[,\n]/){
			$registrar = $1;
			chomp $registrar;
		}
		if ($whois =~ /Record created on (\d\d\-\w\w\w\-\d\d\d\d)/){
			$registeredOn = $1;
			chomp $registeredOn
		}
		if ($whois =~ /Record expires on (\d\d\-\w\w\w\-\d\d\d\d)/){
			$renewal = $1;
			chomp $renewal;
		}
		if ($whois =~ /Domain servers in listed order:\n(.+)Domain status/s){
			my $ns = $1;
			foreach my $nameserver ( split (/\n/, $ns)){
				if ($nameserver =~ (/\s*([\S]+)\s*/)){
					$nameserver = $1;
					if ($nameserver !~ /^$/){
						push @nameservers, $nameserver;
					}
				}
			}
		}
	}elsif($domain =~ /(biz|info|mobi)$/){
		my @whois = `whois $domain`;
		foreach(@whois){
			if (/^Registrant Name:\s*(\w+[\s\w+]*).+\n/){
				$registrar = $1;
			}
			if (/^Sponsoring Registrar:\s*(\w+[\s\w+]*).*\n/){
				$registrant = $1;
			}
			if ( (/^Domain Registration Date:\s+(.+)\n/) || (/^Created On:(.+)/) ){
				$registeredOn = $1;
			}
			if ( (/^\w*\s?Expiration Date:\s+(.+)\n/) || (/^Expiration Date:(.+)/) ){
				$renewal = $1;
			}
		}
		@nameservers = grep( /^Name Server:/, @whois);
		foreach(@nameservers){
			if ($_ =~ /Name Server:\s*(\S+)\s*\n/){
				$_ = $1;
				chomp $_;
			}else{
				$_ = undef;
			}
		}
	}else{
		$registrant = "not a supported tld";
		$registrar = "I can only do .uk .com .net .edu .org .biz .info .mobi and .tv domains"
	}
	return $registrant, $registrar, $registeredOn, $renewal, \@nameservers;
}

sub usage() {
	print <<EOF;
$0 does whois lookups and only returns interesting things

USAGE:
	$0 DOMAIN [DOMAIN DOMAIN DOMAIN...]

If there's only one argument, it looks up that domain and produces 
human-orientated output. If you supply multiple domains, it returns 
double-colon delimited output intended for awk and the like.
EOF
exit 1;
}
